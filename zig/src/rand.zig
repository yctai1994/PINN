const std = @import("std");

// source: https://prng.di.unimi.it/splitmix64.c
fn splitmix64(smx: *u64) u64 {
    var ret: u64 = blk: {
        smx.* +%= 0x9e3779b97f4a7c15;
        break :blk smx.*;
    };

    ret = (ret ^ (ret >> 30)) *% 0xbf58476d1ce4e5b9;
    ret = (ret ^ (ret >> 27)) *% 0x94d049bb133111eb;
    return ret ^ (ret >> 31);
}

test "splitMix64" {
    var smx: u64 = 1234567;
    try std.testing.expectEqual(splitmix64(&smx), 0x599ed017fb08fc85);
    try std.testing.expectEqual(splitmix64(&smx), 0x2c73f08458540fa5);
    try std.testing.expectEqual(splitmix64(&smx), 0x883ebce5a3f27c77);
    try std.testing.expectEqual(splitmix64(&smx), 0x3fbef740e9177b3f);
}

fn rotl(x: u64, r: u6) u64 {
    return (x << r) | (x >> (1 +% ~r));
}

fn Xoshiro256(comptime T: type) type {
    if (T != u64 and T != f64) @compileError("Xoshiro256(...) only accepts u64 and f64.");

    return struct {
        xsr: [4]u64,

        fn init(seed: u64) @This() {
            var smx: u64 = seed;
            var xsr: [4]u64 = undefined;
            for (&xsr) |*ptr| ptr.* = splitmix64(&smx);
            return .{ .xsr = xsr };
        }

        fn rand(self: *@This()) T {
            const ret: u64 = switch (T) {
                // source: https://prng.di.unimi.it/xoshiro256plusplus.c
                u64 => rotl(self.xsr[0] +% self.xsr[3], 23) +% self.xsr[0],
                // source: https://prng.di.unimi.it/xoshiro256plus.c
                f64 => self.xsr[0] +% self.xsr[3],
                else => unreachable,
            };
            const tmp: u64 = self.xsr[1] << 17;

            self.xsr[2] ^= self.xsr[0];
            self.xsr[3] ^= self.xsr[1];
            self.xsr[1] ^= self.xsr[2];
            self.xsr[0] ^= self.xsr[3];
            self.xsr[2] ^= tmp;

            self.xsr[3] = rotl(self.xsr[3], 45);

            return switch (T) {
                f64 => @as(f64, @bitCast(0x3ff0000000000000 | (ret >> 12))) - 1.0,
                else => ret,
            };
        }
    };
}

test "Xoshiro256+" {
    var xsr = Xoshiro256(f64).init(1234567);
    try std.testing.expectEqual(xsr.rand() + 1.0, 1.5990871994036995); // 0x995dc758e42077c4
    try std.testing.expectEqual(xsr.rand() + 1.0, 1.7222763479033036); // 0xb8e71a4ceb441e47
    try std.testing.expectEqual(xsr.rand() + 1.0, 1.6103971165192643); // 0x9c42fc4505df856a
    try std.testing.expectEqual(xsr.rand() + 1.0, 1.1700814247389983); // 0x2b8a74cce93cc5a2
}

test "Xoshiro256++" {
    var xsr = Xoshiro256(u64).init(1234567);
    try std.testing.expectEqual(xsr.rand(), 0x0610e053dd55ab68);
    try std.testing.expectEqual(xsr.rand(), 0x70c979e26e27fbac);
    try std.testing.expectEqual(xsr.rand(), 0xfb95f99f9f6bb2de);
    try std.testing.expectEqual(xsr.rand(), 0x03890aaecd9fa80a);
}

fn pdf(x: f64) f64 {
    return @exp(-0.5 * x * x);
}

const norm_xr: comptime_float = 0x1.d3bb48209ad33p1;
const norm_vf: comptime_float = 0x1.f493b7815d98cp1;

pub const NormPrng = struct {
    xu64: *Xoshiro256(u64),
    xf64: *Xoshiro256(f64),

    pub fn init(allocator: std.mem.Allocator, prng_seed: ?u64) !NormPrng {
        const seed: u64 = if (prng_seed) |val| val else blk: {
            var tmp: u64 = undefined;
            try std.os.getrandom(std.mem.asBytes(&tmp));
            break :blk tmp;
        };

        const xu64: *Xoshiro256(u64) = try allocator.create(Xoshiro256(u64));
        const xf64: *Xoshiro256(f64) = try allocator.create(Xoshiro256(f64));
        xu64.* = Xoshiro256(u64).init(seed);
        xf64.* = Xoshiro256(f64).init(seed);

        return .{ .xu64 = xu64, .xf64 = xf64 };
    }

    pub fn deinit(self: *const NormPrng, allocator: std.mem.Allocator) void {
        allocator.destroy(self.xu64);
        allocator.destroy(self.xf64);
        return;
    }

    pub fn rand(self: *const NormPrng) f64 {
        var ub: u64 = self.xu64.rand(); // uniform random as bit
        var bi: u64 = undefined;
        var ui: u64 = undefined;
        var uf: f64 = undefined;

        while (true) : (ub = self.xu64.rand()) {
            bi = ub & 0x00000000000000ff; // block index
            ub = ub >> 12;
            ui = 0x3ff0000000000000 | ub; // ∈ Uniform[1, 2)
            uf = @as(f64, @bitCast(0x4000000000000000 | ub)) - 3.0; // ∈ Uniform[-1, 1)

            if (ui < norm_rtab[bi]) return if (bi == 0) uf * norm_vf else uf * norm_xtab[bi - 1];
            if (bi == 0) return self.tail(uf < 0.0);
            if (self.xf64.rand() * (norm_ftab[bi - 1] - norm_ftab[bi]) < (pdf(uf) - norm_ftab[bi])) return uf * norm_xtab[bi - 1];
        }
    }

    fn tail(self: *const NormPrng, negative: bool) f64 {
        var x: f64 = 1.0;
        var y: f64 = 0.0;
        while (-2.0 * y < x * x) {
            x = @log(self.xf64.rand()) / norm_xr;
            y = @log(self.xf64.rand());
        }
        return if (negative) x - norm_xr else norm_xr - x;
    }
};

test "Check Tables of Ziggurat Method" {
    const norm_xr_test: comptime_float = 3.654152885361009;
    const norm_sv_test: comptime_float = 0.004928673233974658;
    const norm_fr_test: comptime_float = @exp(-0.5 * norm_xr_test * norm_xr_test); // pdf(xr)
    const norm_cr_test: comptime_float = 1.0 + norm_xr_test * norm_fr_test / norm_sv_test; // comparison reference

    try std.testing.expectEqual(norm_xtab[0], norm_xr_test);
    try std.testing.expectEqual(norm_ftab[0], norm_fr_test);
    try std.testing.expectEqual(norm_rtab[0], @as(u64, @bitCast(@as(f64, norm_cr_test))));

    try std.testing.expectEqual(norm_xtab[255], 0.0);
    try std.testing.expectEqual(norm_ftab[255], 1.0);
    try std.testing.expectEqual(norm_rtab[255], 0x3ff0000000000000);

    for (1..255) |i| {
        try std.testing.expectEqual(norm_xtab[i], @sqrt(-2.0 * @log(norm_ftab[i - 1] + norm_sv_test / norm_xtab[i - 1])));
        try std.testing.expectEqual(norm_ftab[i], pdf(norm_xtab[i]));
        try std.testing.expectEqual(norm_rtab[i], @as(u64, @bitCast(1.0 + norm_xtab[i] / norm_xtab[i - 1])));
    }
}

const norm_xtab: [256]f64 = .{
    0x1.d3bb48209ad33p1,
    0x1.b981f3878fdb0p1,
    0x1.a8fdc78947758p1,
    0x1.9cbee014057a9p1,
    0x1.92ee0946f4494p1,
    0x1.8ab0fbfaa7c12p1,
    0x1.839030529f232p1,
    0x1.7d42df4d6ce8ap1,
    0x1.7799556090671p1,
    0x1.72728f05f7a33p1,
    0x1.6db6b8d09e230p1,
    0x1.69540be9fe5c1p1,
    0x1.653ce7b006ae9p1,
    0x1.61669cf861e4ap1,
    0x1.5dc8a243ad0fdp1,
    0x1.5a5c08b718dd8p1,
    0x1.571b1a94ae41ap1,
    0x1.54011523a7e41p1,
    0x1.5109f53e9ac40p1,
    0x1.4e3250dcd8901p1,
    0x1.4b7739d6b5a26p1,
    0x1.48d62759c43bap1,
    0x1.464ce44a73a13p1,
    0x1.43d9815545e91p1,
    0x1.417a49cb9e5d7p1,
    0x1.3f2dbaa60f472p1,
    0x1.3cf27b31704a3p1,
    0x1.3ac7570ae88f7p1,
    0x1.38ab392564107p1,
    0x1.369d27a33a83dp1,
    0x1.349c405ae12a0p1,
    0x1.32a7b5e68a4a0p1,
    0x1.30becd256aeebp1,
    0x1.2ee0db1a978f3p1,
    0x1.2d0d43196db96p1,
    0x1.2b437532a0a51p1,
    0x1.2982ecd770e77p1,
    0x1.27cb2faa8592dp1,
    0x1.261bcc77658dfp1,
    0x1.24745a4ac9c23p1,
    0x1.22d477a6fd3eep1,
    0x1.213bc9d04cc81p1,
    0x1.1fa9fc2e2d900p1,
    0x1.1e1ebfbe4ae38p1,
    0x1.1c99ca971a693p1,
    0x1.1b1ad777f2f8ep1,
    0x1.19a1a564eebacp1,
    0x1.182df74d21261p1,
    0x1.16bf93b9deef3p1,
    0x1.1556448602e3bp1,
    0x1.13f1d69c4096dp1,
    0x1.129219bbb5d35p1,
    0x1.1136e04207041p1,
    0x1.0fdffefa69fb6p1,
    0x1.0e8d4cf116593p1,
    0x1.0d3ea34aa3d30p1,
    0x1.0bf3dd1eed447p1,
    0x1.0aacd7571c0c3p1,
    0x1.0969708e8a253p1,
    0x1.082988f632e16p1,
    0x1.06ed023a72667p1,
    0x1.05b3bf6adb37dp1,
    0x1.047da4e3ef5c6p1,
    0x1.034a983a902aap1,
    0x1.021a8028fc946p1,
    0x1.00ed447d3a074p1,
    0x1.ff859c118f608p0,
    0x1.fd360d22fe783p0,
    0x1.faebb187122bcp0,
    0x1.f8a6604899780p0,
    0x1.f665f20c90165p0,
    0x1.f42a40fb74d6ap0,
    0x1.f1f328ac2531dp0,
    0x1.efc086101eca5p0,
    0x1.ed9237610a735p0,
    0x1.eb681c0f76f04p0,
    0x1.e94214b2abf06p0,
    0x1.e72002f97fe20p0,
    0x1.e501c99c1d183p0,
    0x1.e2e74c4ea46f0p0,
    0x1.e0d06fb49d216p0,
    0x1.debd195522e31p0,
    0x1.dcad2f8fc4908p0,
    0x1.daa0999206e6bp0,
    0x1.d8973f4d7fba1p0,
    0x1.d691096e7f11fp0,
    0x1.d48de1533c643p0,
    0x1.d28db1037ef1cp0,
    0x1.d0906328b8f6ap0,
    0x1.ce95e3068e033p0,
    0x1.cc9e1c73bd68bp0,
    0x1.caa8fbd36a2a6p0,
    0x1.c8b66e0eba612p0,
    0x1.c6c6608ec8700p0,
    0x1.c4d8c136e0d18p0,
    0x1.c2ed7e5f07a29p0,
    0x1.c10486cec169cp0,
    0x1.bf1dc9b81ae7fp0,
    0x1.bd3936b2ec09ep0,
    0x1.bb56bdb85256ap0,
    0x1.b9764f1e5f739p0,
    0x1.b797db93f8925p0,
    0x1.b5bb541ce3d01p0,
    0x1.b3e0aa0e00bfdp0,
    0x1.b207cf09a9858p0,
    0x1.b030b4fc3a117p0,
    0x1.ae5b4e18bb334p0,
    0x1.ac878cd5af5ccp0,
    0x1.aab563e9ff107p0,
    0x1.a8e4c64a0313cp0,
    0x1.a715a724aa9a4p0,
    0x1.a547f9e0bbb88p0,
    0x1.a37bb21a2c85bp0,
    0x1.a1b0c39f93692p0,
    0x1.9fe7226fad24ap0,
    0x1.9e1ec2b6f7411p0,
    0x1.9c5798cd5d92cp0,
    0x1.9a919933f99bfp0,
    0x1.98ccb892e2a31p0,
    0x1.9708ebb70d5eep0,
    0x1.954627903a28bp0,
    0x1.9384612ef0afdp0,
    0x1.91c38dc288348p0,
    0x1.9003a2973b590p0,
    0x1.8e44951446a27p0,
    0x1.8c865aba10c9dp0,
    0x1.8ac8e9205c044p0,
    0x1.890c35f47f72ep0,
    0x1.875036f7a7ec6p0,
    0x1.8594e1fd1f5bdp0,
    0x1.83da2ce899f15p0,
    0x1.82200dac88676p0,
    0x1.80667a486ea1fp0,
    0x1.7ead68c73dee7p0,
    0x1.7cf4cf3db22fcp0,
    0x1.7b3ca3c8b140bp0,
    0x1.7984dc8babd94p0,
    0x1.77cd6faeff44ap0,
    0x1.7616535e5731fp0,
    0x1.745f7dc70eedcp0,
    0x1.72a8e516914c6p0,
    0x1.70f27f78b68ebp0,
    0x1.6f3c43161f854p0,
    0x1.6d8626128d353p0,
    0x1.6bd01e8b343bdp0,
    0x1.6a1a22950b2b3p0,
    0x1.6864283b13139p0,
    0x1.66ae257c99674p0,
    0x1.64f8104b7260dp0,
    0x1.6341de8a2b0a4p0,
    0x1.618b860a31fc5p0,
    0x1.5fd4fc89f5e39p0,
    0x1.5e1e37b2f8cd4p0,
    0x1.5c672d17d733fp0,
    0x1.5aafd23241b5bp0,
    0x1.58f81c60e8516p0,
    0x1.574000e555f7ap0,
    0x1.558774e1bb2c9p0,
    0x1.53ce6d56a6651p0,
    0x1.5214df20a8b5dp0,
    0x1.505abef5e5564p0,
    0x1.4ea001638a606p0,
    0x1.4ce49acb311ddp0,
    0x1.4b287f602415ep0,
    0x1.496ba32488f30p0,
    0x1.47adf9e66c338p0,
    0x1.45ef773cac75fp0,
    0x1.44300e83c30a6p0,
    0x1.426fb2da6745fp0,
    0x1.40ae571e09e76p0,
    0x1.3eebede725a85p0,
    0x1.3d28698561de2p0,
    0x1.3b63bbfb83d05p0,
    0x1.399dd6fb2b266p0,
    0x1.37d6abe05586bp0,
    0x1.360e2baca52d6p0,
    0x1.3444470265ea2p0,
    0x1.3278ee1f4b931p0,
    0x1.30ac10d6e48d8p0,
    0x1.2edd9e8cba98ep0,
    0x1.2d0d862e1b853p0,
    0x1.2b3bb62b82edap0,
    0x1.29681c719d71bp0,
    0x1.2792a661dd37fp0,
    0x1.25bb40ca96bfbp0,
    0x1.23e1d7de9c31fp0,
    0x1.2206572c4c6e9p0,
    0x1.2028a9940a09fp0,
    0x1.1e48b93e0d42dp0,
    0x1.1c666f8f82acap0,
    0x1.1a81b51ee6d86p0,
    0x1.189a71a78da32p0,
    0x1.16b08bfc4201cp0,
    0x1.14c3e9f8e913fp0,
    0x1.12d4707310fbdp0,
    0x1.10e20329515edp0,
    0x1.0eec84b16086ap0,
    0x1.0cf3d664bcc7ep0,
    0x1.0af7d84bc6112p0,
    0x1.08f869071f40bp0,
    0x1.06f565b72a010p0,
    0x1.04eea9e16a5fcp0,
    0x1.02e40f5398f9ap0,
    0x1.00d56e04234ecp0,
    0x1.fd8537dfa2eacp-1,
    0x1.f956d9e87d7aep-1,
    0x1.f51f654d8f688p-1,
    0x1.f0de784f06226p-1,
    0x1.ec93abdf982cep-1,
    0x1.e83e9337a6f00p-1,
    0x1.e3debb5d2edfep-1,
    0x1.df73aa9f17651p-1,
    0x1.dafce0023b8c2p-1,
    0x1.d679d29e41f0ep-1,
    0x1.d1e9f0e80b746p-1,
    0x1.cd4c9fe722689p-1,
    0x1.c8a13a5323b60p-1,
    0x1.c3e70f9594ef2p-1,
    0x1.bf1d62abf8232p-1,
    0x1.ba4368e529f3ap-1,
    0x1.b558487427a29p-1,
    0x1.b05b16d136c9cp-1,
    0x1.ab4ad6e101630p-1,
    0x1.a62676d77cd59p-1,
    0x1.a0eccdca4a72cp-1,
    0x1.9b9c98e38c546p-1,
    0x1.96347822c1eeap-1,
    0x1.90b2ea94ecf98p-1,
    0x1.8b1649e7b769ap-1,
    0x1.855cc53430a77p-1,
    0x1.7f845ad46f543p-1,
    0x1.798ad10b32a78p-1,
    0x1.736dad346f8a6p-1,
    0x1.6d2a292000570p-1,
    0x1.66bd261a37c3dp-1,
    0x1.60231cfd97ee8p-1,
    0x1.59580a707ce94p-1,
    0x1.52575621ad370p-1,
    0x1.4b1bb363dfea3p-1,
    0x1.439ef8dff9b4fp-1,
    0x1.3bd9ec1a2b129p-1,
    0x1.33c3fc05791efp-1,
    0x1.2b52e3863d87ap-1,
    0x1.227a28f7a1aeep-1,
    0x1.192a697413671p-1,
    0x1.0f5053b025d3cp-1,
    0x1.04d32278ebba6p-1,
    0x1.f32482d4cd5b5p-2,
    0x1.dac2f5a747261p-2,
    0x1.c004d2f3861e3p-2,
    0x1.a230c2e4cd0a1p-2,
    0x1.801fce82fa6eap-2,
    0x1.57cb938443b35p-2,
    0x1.250af3c2c5b7ap-2,
    0x1.b8d0be3fdf607p-3,
    0x0.0000000000000p0,
};

const norm_ftab: [256]f64 = .{
    0x1.4a605b6b9f70ap-10,
    0x1.55f9f43c1b072p-9,
    0x1.08a1f03b0b20dp-8,
    0x1.69ea8d90cb873p-8,
    0x1.ce160f8ec684dp-8,
    0x1.1a59229952f9fp-7,
    0x1.4eb96421acff0p-7,
    0x1.841040d8da48ap-7,
    0x1.ba48d274f8fbap-7,
    0x1.f152a4f72dd59p-7,
    0x1.149033460301fp-6,
    0x1.30d388dab5e21p-6,
    0x1.4d6eaf2fbb06cp-6,
    0x1.6a5daf40bbf90p-6,
    0x1.879d1b600c113p-6,
    0x1.a529f4e22ec02p-6,
    0x1.c301983cd0924p-6,
    0x1.e121adb828c7dp-6,
    0x1.ff881d718a5ccp-6,
    0x1.0f1982e968017p-5,
    0x1.1e9059f1f6ac3p-5,
    0x1.2e27ce83df4a5p-5,
    0x1.3ddf2ce98eed8p-5,
    0x1.4db5d0e112772p-5,
    0x1.5dab23cf2adeap-5,
    0x1.6dbe9b398d078p-5,
    0x1.7defb77af2733p-5,
    0x1.8e3e02a68b5c1p-5,
    0x1.9ea90f929557ap-5,
    0x1.af30790385f8bp-5,
    0x1.bfd3e0f282a45p-5,
    0x1.d092efeadf17cp-5,
    0x1.e16d547b2519cp-5,
    0x1.f262c2b6c6e49p-5,
    0x1.01b979e30e49dp-4,
    0x1.0a4ed2c159629p-4,
    0x1.12f14d0f217a2p-4,
    0x1.1ba0cbe978982p-4,
    0x1.245d344dd0d96p-4,
    0x1.2d266cf9b3115p-4,
    0x1.35fc5e4d93e70p-4,
    0x1.3edef23269a86p-4,
    0x1.47ce1401b2218p-4,
    0x1.50c9b06fa2bb4p-4,
    0x1.59d1b577466a9p-4,
    0x1.62e6124854d18p-4,
    0x1.6c06b73694a4cp-4,
    0x1.753395aaa1176p-4,
    0x1.7e6ca013eefd6p-4,
    0x1.87b1c9dbf2852p-4,
    0x1.9103075a4a0abp-4,
    0x1.9a604dc9d5b19p-4,
    0x1.a3c9933ea6286p-4,
    0x1.ad3ece9caf632p-4,
    0x1.b6bff78f2e233p-4,
    0x1.c04d0680b1016p-4,
    0x1.c9e5f493b7411p-4,
    0x1.d38abb9bd91ecp-4,
    0x1.dd3b56176e897p-4,
    0x1.e6f7bf29aa553p-4,
    0x1.f0bff29520e24p-4,
    0x1.fa93ecb6b2234p-4,
    0x1.0239d54067d2ep-3,
    0x1.072f94bb8bf89p-3,
    0x1.0c2b33d5209bep-3,
    0x1.112cb1da26ebep-3,
    0x1.16340e5a82d69p-3,
    0x1.1b41492757d47p-3,
    0x1.2054625183c3ap-3,
    0x1.256d5a2835ebcp-3,
    0x1.2a8c3137a0722p-3,
    0x1.2fb0e847c2a6cp-3,
    0x1.34db805b4ab91p-3,
    0x1.3a0bfaae8d7f7p-3,
    0x1.3f4258b6931bap-3,
    0x1.447e9c20375dfp-3,
    0x1.49c0c6cf5ce38p-3,
    0x1.4f08dade31fcep-3,
    0x1.5456da9c86843p-3,
    0x1.59aac88f31d7cp-3,
    0x1.5f04a76f88408p-3,
    0x1.64647a2adf1abp-3,
    0x1.69ca43e21f26bp-3,
    0x1.6f3607e964722p-3,
    0x1.74a7c9c7ab5b2p-3,
    0x1.7a1f8d368a32ep-3,
    0x1.7f9d5621f7180p-3,
    0x1.852128a819a44p-3,
    0x1.8aab091928166p-3,
    0x1.903afbf74fa74p-3,
    0x1.95d105f6a7c35p-3,
    0x1.9b6d2bfd2fe68p-3,
    0x1.a10f7322d7e4bp-3,
    0x1.a6b7e0b19268bp-3,
    0x1.ac667a2571813p-3,
    0x1.b21b452ccd146p-3,
    0x1.b7d647a8731b6p-3,
    0x1.bd9787abe18adp-3,
    0x1.c35f0b7d89d53p-3,
    0x1.c92cd9971df5fp-3,
    0x1.cf00f8a5e6fd5p-3,
    0x1.d4db6f8b25156p-3,
    0x1.dabc455c79010p-3,
    0x1.e0a381645718dp-3,
    0x1.e6912b2283ce6p-3,
    0x1.ec854a4c99c4dp-3,
    0x1.f27fe6ce998d8p-3,
    0x1.f88108cb8323bp-3,
    0x1.fe88b89df93c7p-3,
    0x1.024b7f6c7747fp-2,
    0x1.0555f2242e9d9p-2,
    0x1.0863b8f904336p-2,
    0x1.0b74d88b242dap-2,
    0x1.0e895598709c4p-2,
    0x1.11a134fcf2423p-2,
    0x1.14bc7bb34ee67p-2,
    0x1.17db2ed5454e8p-2,
    0x1.1afd539c2f050p-2,
    0x1.1e22ef6188116p-2,
    0x1.214c079f7cc9ep-2,
    0x1.2478a1f17de87p-2,
    0x1.27a8c414db11cp-2,
    0x1.2adc73e963fdbp-2,
    0x1.2e13b77210765p-2,
    0x1.314e94d5af62ep-2,
    0x1.348d125f9d19cp-2,
    0x1.37cf368081378p-2,
    0x1.3b1507cf143adp-2,
    0x1.3e5e8d08ed2dap-2,
    0x1.41abcd1357a19p-2,
    0x1.44fccefc324fep-2,
    0x1.485199fad6ad4p-2,
    0x1.4baa357109ca2p-2,
    0x1.4f06a8ebf6d92p-2,
    0x1.5266fc2533bebp-2,
    0x1.55cb3703d00fcp-2,
    0x1.5933619d6eebcp-2,
    0x1.5c9f84376c242p-2,
    0x1.600fa7480d2c8p-2,
    0x1.6383d377be515p-2,
    0x1.66fc11a25cbe2p-2,
    0x1.6a786ad88de20p-2,
    0x1.6df8e86124caap-2,
    0x1.717d93ba9614ap-2,
    0x1.7506769c7b1eap-2,
    0x1.78939af9252e6p-2,
    0x1.7c250aff414abp-2,
    0x1.7fbad11b8d90cp-2,
    0x1.8354f7faa0dd6p-2,
    0x1.86f38a8ac5ab2p-2,
    0x1.8a9693fde9184p-2,
    0x1.8e3e1fcb9f113p-2,
    0x1.91ea39b33cb14p-2,
    0x1.959aedbe09f8fp-2,
    0x1.995048418c0c2p-2,
    0x1.9d0a55e1e93dbp-2,
    0x1.a0c923946843ap-2,
    0x1.a48cbea20c04ap-2,
    0x1.a85534aa4d87bp-2,
    0x1.ac2293a5f5a98p-2,
    0x1.aff4e9ea1854ep-2,
    0x1.b3cc462b331c7p-2,
    0x1.b7a8b78071319p-2,
    0x1.bb8a4d6716d8ep-2,
    0x1.bf7117c616a14p-2,
    0x1.c35d26f1d2cb4p-2,
    0x1.c74e8bb00d7c2p-2,
    0x1.cb45573c0a843p-2,
    0x1.cf419b4ae5b69p-2,
    0x1.d3436a102107cp-2,
    0x1.d74ad6426de2ep-2,
    0x1.db57f320b56adp-2,
    0x1.df6ad47763a04p-2,
    0x1.e3838ea5f9b81p-2,
    0x1.e7a236a4ec3c3p-2,
    0x1.ebc6e20bd1f52p-2,
    0x1.eff1a717e8f93p-2,
    0x1.f4229cb2f7af1p-2,
    0x1.f859da7a900c8p-2,
    0x1.fc9778c7bbda1p-2,
    0x1.006dc85b8cac4p-1,
    0x1.02931e18b822ap-1,
    0x1.04bbcafa63f2ep-1,
    0x1.06e7dccf03c36p-1,
    0x1.091761d995d81p-1,
    0x1.0b4a68d70d9aep-1,
    0x1.0d810104142a0p-1,
    0x1.0fbb3a2325913p-1,
    0x1.11f9248311f39p-1,
    0x1.143ad105ea99dp-1,
    0x1.16805128639dcp-1,
    0x1.18c9b709b3c52p-1,
    0x1.1b171573fd113p-1,
    0x1.1d687fe54996bp-1,
    0x1.1fbe0a9929622p-1,
    0x1.2217ca92ff7f3p-1,
    0x1.2475d5a90db85p-1,
    0x1.26d84290504eep-1,
    0x1.293f28e93cd16p-1,
    0x1.2baaa14d7954ap-1,
    0x1.2e1ac55ea3beep-1,
    0x1.308fafd6438efp-1,
    0x1.33097c9703a35p-1,
    0x1.358848bf550e9p-1,
    0x1.380c32bda00d5p-1,
    0x1.3a955a662cd0ep-1,
    0x1.3d23e10af31a3p-1,
    0x1.3fb7e99585b82p-1,
    0x1.425198a355fe3p-1,
    0x1.44f114a493679p-1,
    0x1.479685fdf5012p-1,
    0x1.4a42172dc5279p-1,
    0x1.4cf3f4f494ec1p-1,
    0x1.4fac4e820b668p-1,
    0x1.526b55a656cd6p-1,
    0x1.55313f08d9e47p-1,
    0x1.57fe4264c8d90p-1,
    0x1.5ad29acc85c89p-1,
    0x1.5dae86f4aff6ap-1,
    0x1.6092498802665p-1,
    0x1.637e298550c18p-1,
    0x1.667272a92e323p-1,
    0x1.696f75e513b2ap-1,
    0x1.6c7589e635a89p-1,
    0x1.6f850baea7aeep-1,
    0x1.729e5f43f6d12p-1,
    0x1.75c1f0770d856p-1,
    0x1.78f033ca0b0d5p-1,
    0x1.7c29a779c6858p-1,
    0x1.7f6ed4b20e2cbp-1,
    0x1.82c050f56cf6ep-1,
    0x1.861ebfc37bcabp-1,
    0x1.898ad48badf02p-1,
    0x1.8d0554fe60aa8p-1,
    0x1.908f1bd31714fp-1,
    0x1.94291c21b7a48p-1,
    0x1.97d4657617ac2p-1,
    0x1.9b9228d240683p-1,
    0x1.9f63bee651fdap-1,
    0x1.a34aafdf5af12p-1,
    0x1.a748bd550c9e4p-1,
    0x1.ab5fef17a2507p-1,
    0x1.af92a3f6ce8a5p-1,
    0x1.b3e3a8234dd13p-1,
    0x1.b85653a8ff555p-1,
    0x1.bceeb4ee1dc85p-1,
    0x1.c1b1cd9eebaedp-1,
    0x1.c6a5ecea97882p-1,
    0x1.cbd33a8a72defp-1,
    0x1.d144978a119e0p-1,
    0x1.d70920657bcf7p-1,
    0x1.dd36fa704de9bp-1,
    0x1.e3f11e027f07ep-1,
    0x1.eb7545b6ca91dp-1,
    0x1.f446ac979f091p-1,
    0x1.0000000000000p0,
};

const norm_rtab: [256]u64 = .{
    0x3ffef33d8025ef61,
    0x3fff1a5a4b331c4a,
    0x3fff66c5f7f0302c,
    0x3fff89fa48a41dfc,
    0x3fff9e971e014598,
    0x3fffac40582a2874,
    0x3fffb606c4005434,
    0x3fffbd6581c0b83a,
    0x3fffc32b2f1e22ed,
    0x3fffc7d26ecd2d23,
    0x3fffcba8d85e11b1,
    0x3fffcee204761f9e,
    0x3fffd1a1a7b4c7ac,
    0x3fffd40149e2f012,
    0x3fffd613adbd650c,
    0x3fffd7e6ef48cf04,
    0x3fffd985e1b2ba75,
    0x3fffdaf8f82e0282,
    0x3fffdc46e529bf13,
    0x3fffdd7509c63bfd,
    0x3fffde87c57efeaa,
    0x3fffdf82b02b71aa,
    0x3fffe068c4ee67b0,
    0x3fffe13c82788314,
    0x3fffe20003995557,
    0x3fffe2b5122fe4fe,
    0x3fffe35d35eeb19c,
    0x3fffe3f9bffd1e37,
    0x3fffe48bd436f458,
    0x3fffe51470977280,
    0x3fffe5947338f742,
    0x3fffe60c9f38307e,
    0x3fffe67da0b6abd8,
    0x3fffe6e8102aa202,
    0x3fffe74c751f6aa6,
    0x3fffe7ab488233c0,
    0x3fffe804f690a940,
    0x3fffe859e07ab1ea,
    0x3fffe8aa5dc4e8e6,
    0x3fffe8f6bd76c5d6,
    0x3fffe93f471d4729,
    0x3fffe9843ba947a4,
    0x3fffe9c5d62f563a,
    0x3fffea044c8dd9f6,
    0x3fffea3fcffd73e5,
    0x3fffea788d8ee328,
    0x3fffeaaeae992257,
    0x3fffeae2591a02e9,
    0x3fffeb13b00b2d4b,
    0x3fffeb42d3ad1f9e,
    0x3fffeb6fe1c98542,
    0x3fffeb9af5ee0cdc,
    0x3fffebc429a0b692,
    0x3fffebeb948e6fd0,
    0x3fffec114cb4b335,
    0x3fffec356686c962,
    0x3fffec57f50f31fe,
    0x3fffec790a0da978,
    0x3fffec98b61230c1,
    0x3fffecb708956eb4,
    0x3fffecd4100eb7b8,
    0x3fffecefda07fe34,
    0x3fffed0a732fe644,
    0x3fffed23e76a2fd8,
    0x3fffed3c41dea422,
    0x3fffed538d06ae00,
    0x3fffed69d2b9c02a,
    0x3fffed7f1c38a836,
    0x3fffed937237e98c,
    0x3fffeda6dce938ca,
    0x3fffedb964042cf4,
    0x3fffedcb0ece39d3,
    0x3fffeddbe422047e,
    0x3fffedebea76216c,
    0x3fffedfb27e349cb,
    0x3fffee09a22a1448,
    0x3fffee175eb83c5a,
    0x3fffee2462ad8204,
    0x3fffee30b2e02ad7,
    0x3fffee3c53e12c4f,
    0x3fffee474a0006cf,
    0x3fffee51994e57b6,
    0x3fffee5b45a32888,
    0x3fffee64529e0080,
    0x3fffee6cc3a9bd5e,
    0x3fffee749bff37ff,
    0x3fffee7bdea7b888,
    0x3fffee828e7f3dfd,
    0x3fffee88ae369c7a,
    0x3fffee8e40557516,
    0x3fffee93473c0a39,
    0x3fffee97c524f2e4,
    0x3fffee9bbc26af2e,
    0x3fffee9f2e352024,
    0x3fffeea21d22e4da,
    0x3fffeea48aa29e83,
    0x3fffeea678481d24,
    0x3fffeea7e7897654,
    0x3fffeea8d9c0075e,
    0x3fffeea950296410,
    0x3fffeea94be8333c,
    0x3fffeea8ce04fa0a,
    0x3fffeea7d76ed6fa,
    0x3fffeea668fc2d70,
    0x3fffeea4836b42ac,
    0x3fffeea22762ccae,
    0x3fffee9f557273f4,
    0x3fffee9c0e13485c,
    0x3fffee9851a829eb,
    0x3fffee94207e25da,
    0x3fffee8f7accc852,
    0x3fffee8a60b66343,
    0x3fffee84d2484ab2,
    0x3fffee7ecf7b06ba,
    0x3fffee7858327b82,
    0x3fffee716c3e077a,
    0x3fffee6a0b5897f1,
    0x3fffee623528b42e,
    0x3fffee59e9407f41,
    0x3fffee51271db086,
    0x3fffee47ee2982f4,
    0x3fffee3e3db89b3c,
    0x3fffee34150ae4bc,
    0x3fffee29734b6524,
    0x3fffee1e579006e0,
    0x3fffee12c0d95a07,
    0x3fffee06ae124bc4,
    0x3fffedfa1e0fd414,
    0x3fffeded0f909980,
    0x3fffeddf813c8ad2,
    0x3fffedd171a46e52,
    0x3fffedc2df416652,
    0x3fffedb3c8746ab4,
    0x3fffeda42b85b704,
    0x3fffed9406a42cc9,
    0x3fffed8357e4a982,
    0x3fffed721d414fe8,
    0x3fffed605498c3dd,
    0x3fffed4dfbad586e,
    0x3fffed3b10242f4c,
    0x3fffed278f844903,
    0x3fffed1377358528,
    0x3fffecfec47f91b7,
    0x3fffece97488c8b4,
    0x3fffecd38454fb16,
    0x3fffecbcf0c427fe,
    0x3fffeca5b6911f12,
    0x3fffec8dd2500cb4,
    0x3fffec75406ceef4,
    0x3fffec5bfd29f196,
    0x3fffec42049dafd3,
    0x3fffec2752b15a14,
    0x3fffec0be31ebde8,
    0x3fffebefb16e2e3e,
    0x3fffebd2b8f449d0,
    0x3fffebb4f4cf9d7c,
    0x3fffeb965fe62014,
    0x3fffeb76f4e284fa,
    0x3fffeb56ae3162b4,
    0x3fffeb3585fe2a4b,
    0x3fffeb13762fec12,
    0x3fffeaf07865e63c,
    0x3fffeacc85f3d920,
    0x3fffeaa797de1cf0,
    0x3fffea81a6d5741a,
    0x3fffea5aab32952d,
    0x3fffea329cf166a4,
    0x3fffea0973abe67c,
    0x3fffe9df2694b6d5,
    0x3fffe9b3ac714866,
    0x3fffe986fb939aa2,
    0x3fffe95909d388ea,
    0x3fffe929cc879b1d,
    0x3fffe8f9387d4ef6,
    0x3fffe8c741f0cebc,
    0x3fffe893dc840864,
    0x3fffe85efb35173a,
    0x3fffe8289053f08c,
    0x3fffe7f08d774243,
    0x3fffe7b6e37070a2,
    0x3fffe77b823e9e39,
    0x3fffe73e5900a702,
    0x3fffe6ff55e5f4f2,
    0x3fffe6be661e11aa,
    0x3fffe67b75c6d578,
    0x3fffe6366fd91078,
    0x3fffe5ef3e138689,
    0x3fffe5a5c8e41212,
    0x3fffe559f74ebc77,
    0x3fffe50baed29524,
    0x3fffe4bad34c095c,
    0x3fffe46746d47734,
    0x3fffe410e99ead7f,
    0x3fffe3b799d0002a,
    0x3fffe35b33558d4b,
    0x3fffe2fb8fb54186,
    0x3fffe29885da1b91,
    0x3fffe231e9db1caa,
    0x3fffe1c78cbc3f99,
    0x3fffe1593c28b84c,
    0x3fffe0e6c225a258,
    0x3fffe06fe4bc24f2,
    0x3fffdff46599ed40,
    0x3fffdf7401a6b42e,
    0x3fffdeee708d514e,
    0x3fffde6364369f64,
    0x3fffddd288342f90,
    0x3fffdd3b8118729d,
    0x3fffdc9debb99a7d,
    0x3fffdbf95c5bfcd0,
    0x3fffdb4d5dc02e20,
    0x3fffda9970105e8b,
    0x3fffd9dd07a7add2,
    0x3fffd9178bad2c8c,
    0x3fffd848547b08e8,
    0x3fffd76ea9c8e832,
    0x3fffd689c08e99ec,
    0x3fffd598b8920f53,
    0x3fffd49a9990b479,
    0x3fffd38e4ff0c91e,
    0x3fffd272a8e2f450,
    0x3fffd1464dd6c4e6,
    0x3fffd007bf1dc930,
    0x3fffceb54d8fec99,
    0x3fffcd4d12f839c4,
    0x3fffcbcce902231a,
    0x3fffca325e4bde85,
    0x3fffc87aa92896a4,
    0x3fffc6a2977aee31,
    0x3fffc4a67ae25bd1,
    0x3fffc2821037a248,
    0x3fffc03060ff6c58,
    0x3fffbdab9d040bec,
    0x3fffbaece9a1e50e,
    0x3fffb7ec2366fe77,
    0x3fffb49f8d5374c4,
    0x3fffb0fb6718b90f,
    0x3fffacf160d354db,
    0x3fffa86fde5b4bf8,
    0x3fffa360f581fa72,
    0x3fff9da907dbf508,
    0x3fff9724c74dd0da,
    0x3fff8fa6578325dd,
    0x3fff86f10c6357d2,
    0x3fff7cb2ec28449b,
    0x3fff707a755396a2,
    0x3fff61a5e41ba396,
    0x3fff4f469561255b,
    0x3fff37ed61ffcb14,
    0x3fff19470afa44a8,
    0x3ffeef4b817ecab4,
    0x3ffeb255e9d3f778,
    0x3ffe51f67ec1eee1,
    0x3ffda354fabd8134,
    0x3ffc08be98fbc67a,
    0x3ff0000000000000,
};
